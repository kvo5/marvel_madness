generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Explicitly set output path
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  // job         String? // Remove - Not in original schema request
  // website     String? // Remove - Not in original schema request
  role        Role?    // Add Role Enum
  rank        String?  // Add Rank (String to accommodate tiers)
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts Post[]

  likes Like[]

  saves SavedPosts[]

  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")

  // --- New Team Relations ---

  // Team Created: Link to the team this user created (if any)
  createdTeam Team? @relation("TeamCreator")

  // Team Membership: Link to the team this user is a member of (if any)
  teamId String? // Foreign key to the Team model. Nullable = user might not be in a team.
  team   Team?   @relation("TeamMembers", fields: [teamId], references: [id]) // Relation field

  // Whitelisted On: Link to teams where this user is on the whitelist
  whitelistedOnTeams Team[] @relation("TeamWhitelist")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]

  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}

// Define Enum for Roles
enum Role {
 DUELIST
 VANGUARD
 STRATEGIST
}

// Add this new model to your schema.prisma file

model Team {
  id        String   @id @default(cuid()) // Using cuid() for unique IDs
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relationships ---

  // Creator: One User creates one Team (enforced by @unique)
  creatorId String @unique // This constraint ensures a User can only create one Team
  creator   User   @relation("TeamCreator", fields: [creatorId], references: [id])

  // Members: One Team has many Users, one User belongs to max one Team
  members User[] @relation("TeamMembers") // List of users who are members

  // Whitelist: Many Teams can whitelist many Users
  whitelistedUsers User[] @relation("TeamWhitelist") // Users allowed to join this team

  @@index([name]) // Optional: Index name for faster lookups if needed
}